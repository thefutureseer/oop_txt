Here's a side-by-side comparison of 
JavaScript objects and maps:
In summary, JavaScript objects are widely 
used for storing structured data and organizing 
properties and behavior. They have a flexible 
key-value structure but are primarily based on 
string keys and support prototype inheritance. 
On the other hand, JavaScript maps provide a 
specialized key-value structure with various 
methods and preserve the order of entries. 
They are particularly useful when keys can 
be of any data type and when efficient key-based 
operations and order preservation are required.

| JavaScript Objects                 | JavaScript Maps                                           |
|------------------------------------|-----------------------------------------------------------|
| Key-value pairs with string keys   | Key-value pairs with keys of any data type                |
| Created using object literals or   | Introduced in ECMAScript 2015 (ES6)                       |
| the Object constructor             |                                                           |
|------------------------------------|-----------------------------------------------------------|                                                          |
| Support for prototype chain        | No prototype chain, simpler structure                     |
--------------------------------------------------------------------------------------------------
| Access properties using dot or     | Provide methods like `set()`, `get()`, `has()`, `delete()`|
| bracket notation                   | for manipulating entries                                  |
--------------------------------------------------------------------------------------------------  
| Convenient syntax for property     | Preserve insertion order of elements                      |
| definition and access              |                                                           |
--------------------------------------------------------------------------------------------------  
| Used for representing real-world   | Suitable for scenarios requiring efficient key-based      |
| entities and organizing data       | operations and order preservation                         |
--------------------------------------------------------------------------------------------------

Object constructor (differ from class): 
function Person(name, age) {
  this.name = name;
  this.age = age;
  this.greet = function() {
    console.log("Hello, my name is " + this.name);
  };
}

// Creating objects using the constructor
var person1 = new Person("John", 25);
var person2 = new Person("Jane", 30);

// Accessing object properties and invoking methods
console.log(person1.name);  // Output: John
console.log(person2.age);   // Output: 30
person1.greet();   

